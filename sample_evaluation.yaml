# XPs
XPs:
  - XP

# schema User in DB for homework submissions
userID:
  xp:
    - name: 
      amount: 
  homework_submissions_total:
  courses:
    - courseID:
      homework_submissions_total:
      assignments:
        - assgnID:
          index: 
          value:
  gainedAchievements:
    - achievementID:
      relatedCourse:



# initalzustand
userID: userID1234
  homework_submissions_total: 0
  courses:

# zustand nach 7 wochen im ersten kurs des users
userID: userID1234
  homework_submissions_total: 5
  courses:
    - courseID: course1
      homework_submissions_total: 5
      assignments:
        - assngID: assng1
          index: 1
          value: 1
        - assngID: assng2
          index:
          value: 0
        - assngID: assng3
          index: 3
          value: 1
        - assngID: assng4
          index: 4
          value: 1
        - assngID: assng5
          index: 5
          value: 1
        - assngID: assng6
          index: 6
          value: 0
        - assngID: assng7
          index: 7
          value: 1


# Event für woche 8
# Events müssen uns massig NUtzlast mitgeben, 
# damit wir die Daten nur in die DB übersetzen müssen 
# und keine Logik z.B. zum hochzählen von Parametern benötigen
# Einzige Logik soll sein, Mapping der Eventdaten nach DB-Struktur
# und Auswertung der Achievement-Requirements

# Mapping Event Payload --> Database
EventID:
  type: type
  payload: 
    userID: users[{userID}]
    total: user.homework_submissions_total
    course:
      courseID: users[{userID}].courses[{course.courseID}]
      homework_submissions_total: users[{userID}].courses[{course.courseID}].homework_submissions_total
      assignment: 
        assngID: users[{userID}].courses[{course.courseID}].assignments[{course.assignment.assgnID}]
        index: users[{userID}].courses[{course.courseID}].assignments[{course.assignment.assgnID}].index
        value: users[{userID}].courses[{course.courseID}].assignments[{course.assignment.assgnID}].value

HomeworkSubmission: 
  userID: userID1234
  type: homework_submission
  total: 6
  course:
    courseID: course1
    homework_submissions_total: 6
    assignment: 
      assngID: assng8
      index: 8
      value: 1


# same but in JSON
"HomeworkSubmission": {
  "userID": "userID1234",
  "event_type": "homework_submission",
  "payload": {
    "total": 6 ,
    "course":{
      "courseID": "course1",
      "homework_subsmissions_total": 6,
      "assignments": {
        "assngID": "assng8",
        "index": 8,
        "value": 1
      } 
    }
  }
}

# Frage: wie generisch sollen wir werden?
# z.B: scope: Course mitgeben und 
# damit bei der Auswertung die Information erhalten, 
# dass beim Zusammenbau der KeyChain als nächstes nach einer courseID gesucht werden soll.
# Wenn das flexibel sein soll, dann müssten wir auch für Posts etc. tun und die Hierarchie, bzw. die Komplexität der 
# JSON/YAML Dokumente würde sich erhöhen.


Ziel: Update auf Dokument User mit ID: userID1234
KeyChain:
  userID1234.parameters.homework_submissions_total.set(6)
  userID1234.parameters.homework_submissions.courses.course1.homework_submissions_total.set(8)
  userID1234.parameters.homework_submissions.courses.course1.assignments.append(
    {
      "assngID": "assng8",
      "index": 8,
      "value": 1,
    }
  )

# nächste Frage: wie KeyChain zusammensetzen?
# Woher wissen wir, in welcher Reihenfolge wir die Update oder Set KeyChains 
# zusammensetzen müssen?

# Alternative A: Die Events müssen die Daten in der Struktur bereitstellen, wie wir sie haben wollen.
#       Nachteil: Wenn sich bei uns was ändert, dann müssen sie sich auch ändern.

# Alternative B: Wir haben ein eigenes REgelwerk zur Evaluation von Event.
#       Nachteil: Ein verdammt riesiger Haufen von IF/ELSE

# Alternative C: Für jedes JSON-Keyword e.g. "Homework-Submission" wird ein Set von parametrisierten
#                Calls angelegt, die dann (mit den Nutzdaten befüllt) ausgeführt werden
#       Nachteil: Muss für jede mögliche Aktion gepflegt werden -> Big Ball of Mud

#PROZESSFOLGE
#
#  1. Event X erreicht Service (/)
#  2. Event wird usgewertet -> User Attribute wird erhöht (/)
#  3. Regel werden evaluiert -> betroffene Attribute werden geprüft
#    
#    a) Hole für user XYZ alle Badges die in seiner badge Map den Value 0 haben
#    b) Hole für jede Badge das Objekt/Conditions aus der DB
#    c) Evaluiere onditions
#      each loop over conditions:
#      - "All conditions satisfied" (initial)= true
#      - check user attribute
#      - if current condition not satisfied -> "All conditions satisfied"=false
#        
#  
#  
#  4. Bei Regelerfüllung:  -> selber Event auslösen -> keine Peilung -> z.B. optische Events
#              -> Neues Attribut setzen 
#                -> z.B. Reward (XP) einlösen -> User Attribut ändern
#                -> Badge Amount +1 in Map

Alle Scopes müssen mindestens für den User sein -> wem sonst sollte dann das Achievement verliehen werden? Dem Chat-Bot?
Es gibt offensichtlich Achievements, die den User nur allgemein betreffen (XP>=Betrag, x Upvotes für irgendwas, etc.)

Was ist ein Scope wie z.B. "Course"?
=> man kann das Achievement (z.B. die HomeworkSubmissionStreak3) GENAU 1X pro Kurs per Kurs erhalten.

Frage: Kann man jedes Achievement nur MAX 1X erhalten? Oder gibt es welche, die man mehrfach erhalten kann?

Wir bekommen die userID und die CourseID vom Event und die CourseID steht auch in Kombination mit einer CourseID in den User-Parametern

So weit so gut..

(Heißt Scope Course -> per Kurs oder NUR ein spezifischer Kurs? wahrscheinlich das erste (FUTURE WORK -> Java-Spezialist, weil der user genau diesen Speziellen Kurs absolviert hat))

Ergo  -> alle Achievements die einen User allgemein betreffen werden ausgewertet-> 100ste Hausaufgabe oder 10k XP Marke überschritter (e.g. neuer Level)
      -> plus Achievements die im Kontext Course sind -> Beim Nutzer Nachschauen, welche Achievements für diese Spezifische CourseID noch nicht vergeben wurden
            -> z.B. HomeworkSubmissionStreak3 für course1

Wenn REWARD in Achievement: ein eigenes Event wird in die MessageQueue geworfen, welches der Service verarbeiten muss 
        -> XP erhöhnen
        -> Achievements auswerten, die die XPs der User betreffen

        => Achievement-Ketten





# zustand nach 8 wochen im ersten kurs des users
# Bis auf Assignment 2 und 6 sind alle abgegeben worden.
userID: userID1234
  homework_submissions_total: 6
  courses:
    - courseID: course1
      homework_submissions_total: 6
      assignments:
        - assngID: assng1
          index: 1
          value: 1
        - assngID: assng2
          index: 2
          value: 0
        - assngID: assng3
          index: 3
          value: 1
        - assngID: assng4
          index: 4
          value: 1
        - assngID: assng5
          index: 5
          value: 1
        - assngID: assng6
          index: 6
          value: 0
        - assngID: assng7
          index: 7
          value: 1
        - assngID: assng8
          index: 8
          value: 1
  gainedAchievements:
    - achievementID: HomeworkSubmissionStreak3
      relatedCourse: course1
      amount: 0


#########
# REGEL == Achievements #
#########
TotalHomeworkSubmissions5:
  name: 5 homework submissions
  type: badge
  requirements:
    - name: user.homework_submissions_total
      amount: 5
  scope: [user]
  rewards:
    - type: XP
      amount: 10
HomeworkSubmissionStreak3:
  name: 3 continuous submissions in time 
  type: badge
  requirements:
    - type: streak
      name: course.assignments
      value: 1
      amount: 3
  scope: [user, course]
  rewards:
    - type: XP
      amount: 10



#############
# EVLUATION #
#############

for ( achievement in allAchievements.filter( achievement => achievement.scope == [user] ) ) {
# alle achievements mit entsprechender ID, die der user noch nicht hat 


  # hats der user oder noch nicht? 
  let achievementGained = user.gainedAchievements.find(function(element){
    return element.achievementID == achievement.achievementID
  }).length

  if (!achievementGained) {

    let reqsFulfilled = achievement.requirements.evaluate(eventPayload)

    if(reqsFulfilled){
      achievement.issue(eventPayload)
    }
  }
}


for ( achievement in allAchievements.filter( achievement => achievement.scope == [user, course] ) ) {
# alle achievements mit entsprechender courseID, die der user noch nicht hat 

  # hats der user oder noch nicht? 
  let achievementGained = user.gainedAchievements.find(function(element){
    return 
           element.achievementID == achievement.achievementID 
        && element.relatedCourse == eventPayload.course.courseID
  }).length

  if (!achievementGained) {

    let reqsFulfilled = achievement.requirements.evaluate(eventPayload)

    if(reqsFulfilled){
      achievement.issue(eventPayload)
    }
  }
}





class Achievement {
  constructor(requirementList){
    this.requirementList = requirementList;
  }


  issue() {

  }
}


class RequirementList {
  constructor() {
    this. =;
  }

  evaluate() {

  }

}




class Requirement {
  constructor() {

  }

  evaluate() {

  }
}


class Event {
  constructor() {

  }

  triggerAchievementEvaluation() {

  }
}











